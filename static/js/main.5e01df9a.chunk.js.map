{"version":3,"sources":["components/WeatherCard.js","components/Weather.js","components/App.js","index.js"],"names":["WeatherCard","searchResult","temp","weathermood","name","speed","country","humidity","pressure","sunset","useState","weatherState","setWeatherState","useEffect","date","Date","timeStr","getHours","getMinutes","className","getDate","getMonth","getFullYear","toLocaleTimeString","Weather","searchValue","setSearchValue","setSearchResult","getWeatherInfo","a","url","fetch","res","json","data","console","log","cod","main","weather","wind","sys","alert","message","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e01df9a.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\nconst WeatherCard = ({searchResult}) => {\r\n    const {\r\n        temp,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        humidity,\r\n        pressure,\r\n        sunset\r\n      } = searchResult;\r\n\r\n    const [weatherState,setWeatherState] = useState(\"\")\r\n    useEffect(()=>{\r\n        if(weathermood){\r\n            switch(weathermood){\r\n                case \"Clouds\":\r\n                    setWeatherState(\"wi-cloudy\");\r\n                    break;\r\n                case \"Haze\":\r\n                    setWeatherState(\"wi-fog\");\r\n                    break;\r\n                case \"Clear\" : \r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n                case \"Rain\" : \r\n                    setWeatherState(\"wi-rain\");\r\n                    break;\r\n                case \"Mist\" : \r\n                    setWeatherState(\"wi-dust\");\r\n                    break;\r\n                default:\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    },[weathermood])\r\n\r\n    //   converting the seconds into time\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"weather-icon\">\r\n                <i className={`wi ${weatherState}`}></i>\r\n            </div>\r\n            <div className=\"weather-info\">\r\n          <div className=\"temperature\">{temp}&deg;</div>\r\n          <div className=\"description\">\r\n            <div className=\"condition\">{weathermood}</div>\r\n            <div className=\"place\">{name} , {country}</div>\r\n          </div>\r\n          <div className=\"date\">{new Date().getDate()}/{new Date().getMonth()+1}/{new Date().getFullYear()}, {new Date().toLocaleTimeString()}</div>\r\n        </div>\r\n\r\n        <div className=\"temp-info-minmax\">\r\n          <div className=\"two-sided-section\">\r\n            <p><i className=\"wi wi-sunset\"></i></p>\r\n            <div className=\"right\">\r\n              <p>{timeStr} PM</p>\r\n              <p>Sunset</p>\r\n            </div>           \r\n          </div>\r\n\r\n         <div className=\"two-sided-section\">\r\n            <p><i className=\"wi wi-humidity\"></i></p>\r\n            <div className=\"right\">\r\n              <p>{humidity}</p>\r\n              <p>Humidity</p>\r\n            </div>           \r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p><i className=\"wi wi-rain\"></i></p>\r\n            <div className=\"right\">\r\n              <p>{pressure}</p>\r\n              <p>Pressure</p>\r\n            </div>           \r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p><i className=\"wi wi-strong-wind\"></i></p>\r\n            <div className=\"right\">\r\n              <p>{speed}</p>\r\n              <p>Speed</p>\r\n            </div>           \r\n          </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst Weather = () => {\r\n  const [searchValue, setSearchValue] = useState(\"Kerala\");\r\n  const [searchResult, setSearchResult] = useState({});\r\n\r\n  const getWeatherInfo = async () => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=31422048ddfa4e4dc694e7402174f9a3`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      console.log(data);\r\n      if (data.cod === 200) {\r\n        const { temp, humidity, pressure } = data.main;\r\n        const { main: weathermood } = data.weather[0];\r\n        const { name } = data;\r\n        const { speed } = data.wind;\r\n        const { country, sunset } = data.sys;\r\n\r\n        const result = {\r\n          temp,\r\n          weathermood,\r\n          humidity,\r\n          pressure,\r\n          name,\r\n          speed,\r\n          country,\r\n          sunset,\r\n        };\r\n        setSearchResult(result);\r\n      } else {\r\n        alert(data.message);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <div className=\"search\">\r\n        <input\r\n          type=\"search\"\r\n          placeholder=\"Search...\"\r\n          className=\"search-term\"\r\n          autoFocus\r\n          id=\"search\"\r\n          value={searchValue}\r\n          onChange={(e) => setSearchValue(e.target.value)}\r\n        />\r\n        <button className=\"search-btn\" type=\"button\" onClick={getWeatherInfo}>\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        <WeatherCard searchResult={searchResult} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","\nimport './App.css';\nimport Weather from './Weather';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}